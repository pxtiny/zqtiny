/*
更新时间: 2021-02-25 00:30
Github Actions使用方法见[@lxk0301](https://raw.githubusercontent.com/lxk0301/scripts/master/githubAction.md) 使用方法大同小异

中青看点浏览赚任务，手动完成任务，获取请求体，支持boxjs及Github Actions，多请求用"&"分开，点击任务，支持自动获取请求

https:\/\/ios\.baertt\.com\/v5\/task\/browse_start\.json url script-request-body youth_gain.js

https:\/\/ios\.baertt\.com\/v5\/Nameless\/adlickstart\.json url script-request-body youth_gain.js


多个请求体时用'&'号或者换行隔开"，本脚本可自动删除失效请求，请须知 ‼️

*/


const $ = new Env("中青看点浏览赚&看看赚")
//const notify = $.isNode() ? require('./sendNotify') : '';
let startArr = [], lookArr=[];
let gainscore = 0, lookscore = 0;
let StartBody = [],LookBody = [];
let startbodys = $.getdata('youth_start');
let lookbodys = $.getdata('youth_look')

if (isGetCookie = typeof $request !==`undefined`) {
   GetCookie();
   $.done()
} 
if (!$.isNode() && !startbodys&&!lookbodys) {
  $.msg($.name, "您未获取任何请求，请先获取");
  return
} else if (!$.isNode() && !startbodys.indexOf("&") == -1) {
  startArr.push(startbodys)
} 
if (!$.isNode() && !lookbodys.indexOf("&") == -1) {
  lookArr.push(lookbodys)
} else {
  if (!$.isNode() && !startbodys.indexOf("&") > -1) {
    StartBody = startbodys.split('&');
  }
  if (!$.isNode() && !lookbodys.indexOf("&") > -1) {
    LookBody = lookbodys.split('&');
  }
  if ($.isNode()) {
    if (process.env.YOUTH_START && process.env.YOUTH_START.indexOf('&') > -1) {
      StartBody = process.env.YOUTH_START.split('&');
    } 
    if (process.env.YOUTH_LOOK && process.env.YOUTH_LOOK.indexOf('&') > -1) {
      LookBody = process.env.YOUTH_LOOK.split('&');
    } else {
      LookBody = [process.env.YOUTH_LOOK]
    }
  }
  Object.keys(StartBody).forEach((item) =>{
    if (StartBody[item]) {
      startArr.push(StartBody[item])
    }
  });
 Object.keys(LookBody).forEach((item) =>{
    if (LookBody[item]) {
      lookArr.push(LookBody[item])
    }
  })
}
lookArr=['p=HUJybc31G2V0%3DUiVImOW0Nxha4Y1qB-PCfe2zXBUROz8uZjZaDv3iOUGlgzzih9LKa478lWc5nbbcJ1qC3tIb4d0mlQ_vcghc8Lh3RN3ITjjUTAX7WyU9t3pigir2E-PUlQU_nXmAFucctU7fWaIp3vEUyNJwiefxM3uCXlFdE4r2fPtLdEJMkGsI-Q_nUZDXE5XSfPU1hmRM1KzMuYxaK_jkQOkYDa_I_OWglXnzngUomkRR1JSvZw8oDJhJrf97iGdtJ6Xr6klZNSs-Wx9rHcpaUAxUfONd1pL0C3gxyNmL-XkxxpYkW-MModAyHWHHzwT_ZrZEfeusFDVZ6OUsCn76ajAQtXRmvJv5jCFOj5epRnPjARLaucekWFqAKqoeyiIT4ebTs3Ww6qqFHafXGMTw6AOn4z8PxyQZpzu7xuPBf3BmMlMTCqKunkJ-yQVSzVvla4Ok6RnhXaPoDwCV0Fvj-xLMjGYfrNR6CSxSZh4n_0oIHI5cLXroz9uC0i9wGPX0XOob3wpO0yv5rgBUvEGEsaQaNXUbM7rXCVXU8Y4QEC7fBS3HnaiCzUCONxOi8B_htIkdNFJunmQVDNVfEY2V2s7Zf5h_OcWrCG9AORnIa-eHv2SuqGvjMCl9aQIdhJh5h96dsZja0boP_0OyXm6xB5igDoCiYs1jXoO3dGApFBKUhE4XKQIBUCwaXn3AIXq0cOXl6E1m9wz0wmga011ooPuRS-46kqdtoQTrRZKa_8ehsTT97uhVIkkCZTpAUWrHc1EThuFVuoUmA4l1pvluBdAtnYnXVopcKXkhSOCbMPW_qoRdkdaSFlDkmISPq-Ns-7uNNAZu3-YNxKIWfgwh-iwl8PcX26xVSD4Up9C660MRi-eQWEwTg50pQmr_-l_PJL2NMx2FCQuzgrIGJhx1-HelE3NePHkrhvSenGdMgyL6VCo4zj-gbmm47KDMbne6FlrH6xxiwnHgKWlW1eqDNhWjvSwtyADHhnOGNT8fCzmAwyxyqqDmXila4HB7WaN0Y6e1g7NuG5tNKqtb4fW1F0F1YINfRei9cbPfn4z8fL2HXfUBiu3qsErjT4ttimc7HBrcyRswq4CNzmMOvmjCR64h4fcG8saGApGtqWGk2ejPWZQ-v4-A7gUGlSBtAYoFE_ZIAk75G2rEefnUfKPO3O8V5XUIkRevBJU8wlJn1Vje6nD0r9NtScW1bPYHfGjQWHWxUPgbrqhupe4GzEOe4N0KZnyvZtxUmiIESuOeuRPQ518nbs45R1yOR-9OrqyBiLdAYQVxdL4rtJQnGsha3MPCnm62_o0rvndVhn1UDo1N8MFc1tAwcDGNRCnuY3JBKLVU9Br2FBGDkKtACPtzBmFnicL4bJie1tS-DtB2aomkuIU4sH80UdgO4v5BKKFwu7JxEe84mQoVgtAeQMuKgGmpVfIWAA5oJF3i1q2RPHsSzXQIoOAhEbjeVJ5vMyd4PCIeu8uG9sEtGvTfuvnzXZt8pHsAre3HLWxjFisqCy',
         'p=5XPkPrW1Kghg%3DEfRWZwWkN8guRsb3NgQhKYSFmWUhTVl3rC-YIy3QD7flGvcBXZINVjnLApKLJJ_YCPJVAS_yxPdoYyYAJzHwEQUmimY34q_tcFKCoYZ8jQudvnrW1Y9JaUMtABN3G0DaCUQxniDCbZDYq-DBkqdYONQdUnqB5JASDO-t74UCBIKgme6b6rKvYyialvbYawDuzLADrX0Y2tou535jNbAmHa3zNa2o5VtV7nU1ng_qC8EzHEY6Btl_9xbfn8AwhiDHB7ahM7aPiWslQGiJZvsBmtHsITvgsWdT7x_W4ClUn5O5G9CQcKtOh-IHWgqK5rxBBLEYPYj1Z0rbPd7afIGpgiHqOYEbB0FzJwSgVsOKBeUkZG3-iGMdAPtz8cg4GpjXc9pWA_Mzv54z59QlkqJualxpJf0Xy1OUbM0U9qM3ZP4EqgVBY3n7vAbeQ8dEi6w4myYsBCtcSMWG-RQVksmDZxLcO5s1LxHN5mCblHy08m_6r_mLbFVhcoZtvTP2XdamQG3unWEyW51lnFu48rfhf2Oj8j3aHYXERjiGAtMJDbma-imFnR6XOaElftdN8kHkW8tNnMSUNvo7MLwskMQzpLcUFzGVvnxE4sSZEUSoUm_SX1kLOROC0b598DEZCpHOXGWN3_26OcdA466vey8pyNuUfCvoxRUgZzKmKxLBv6cBQL-QStjLZy2gN7eCuDRdCedGmYePEcAKydOwUuLqKcTAADrFUmtQJDodUb-RB8Pc8WvpHgB64z3zXyoyi0GBm5c32jGpgeEqDCRcQr6mzblGvNqlndXgbVEB2wYvNcO3wezFXjr72uKPATKhwCpiuc2E2dqOqiTOSkMFjiBIqRDF3Ovt6H8CPokqhA2tPmo5HoMvLwnZvLtj6vqxEo9tGVsElN8yFBv578ARn6FzdNSSLdB5_p_OwXfK3UmoOW4DTJS6VIU9_C8Kqe73nWIXhdDalK6rDI_9vcT7XpFvp_f5_zV52XLFZBKo_W3nyjWIjOVxesl9wytvd5pqRNmSg1BCzYZy0vUfXI68LDxV1MUF3sstjW29J6jvLwC3fT5oAjyArLjReDqaF0A9H7yEO7GgFbEL3z1jeUdg5jXkoOHKjss3pq0KYYa_T1D3wlFlfi1fmEZn9LfXymvfL0jYa2GB2-tYQdq4JOOIqFyCdaM4hSnkd47dG2FNRwYEs6D5HznenBj5B8exW_RmieIYh4LHRgmLUBTCkDZEcnEJJKHng2nsKo6zshJ_rJ5E8wFBeh5TzvVdVzIO35QjyXPVY2MRU_ZlLwYgI5BCYwSOmvU3Q02fJcK5dcqP_QxqwRSZNdvdzgdzqa43spB6K5Zmk-YToJUD9W82jb2Vi2bK1tlmMUjdefl1_lqOCI3j4nR6qvf6ocHf9F2_NrdFu5HG5t5kZZn-hydj7mBJuXqEHU2_Pu6t7uSQr9v1UQQzXN5JnLI2WyPVbiuMmKMQqN6UoUFDtiJ54XUeXPjJBdOljtS--ngCRv1-',
         'p=9FbVGOYyXwIo%3DPsKtOYIB3RdZ_0fs2oV9WKSG0V7xJS41GJcwGrNC6UKQEyoXTSdZ0RicKsGzm4VA8stJdD3GWJ04rf5Pezg4jZbng7nyWWyEElm5F8AH9nDdq2rBOhk7knQUQOAem208os-L7qCKgIuMPasqR1WJ0TkD9OH23HATq67gNmVv640Pj3CR5-03LwJsU_AxQ-kNLF2WXj6kA-cLu66uziga-oBjc3qPa5eUH0PK1ZB-8NW-UtAhN6bw4_Kn9V1ftN3Jpsi9-XzCUtKU3SdDUAXgGKkR0Gw3tW2l3LIkqrGBbc-XAF2HNg_Kc3rQF1xXnqzyNplf5lukUz81JH2Pp7lMXnDsZ02bd3BI3MxBUlIDOfF6_6EAQqVLLf-BCICP7zieWOJ-17ELW0FNyplysf-wRowVD5Ly_CsE0OXR3uknPvG1dXo9qjeHOctrnIcNiNRjWk-ywUmeOl6Z-PpL3BTXjMLYjpzsoqEcZQdhoIHQI3KsqTe6KBqTSqp6V0SQGvkaYO3zY5E35arhO6VNpn2Ye4wDFXevR3R2jxWw5GU3S_JixvxHsd1xNJZwIU8nQ3NlQoP5N9MxDG4X4EYTDulZvnQS6WrWM9rZFe2y3yK5x0G6hMocfATf6cUgsBW2b0VaKkONJYO2zyHPE4UjeO3htOzHspM9MYtflKAD1ZxtywMsajrdqM7hkqvHaLtMG7nG6jBeS5H6TQZUvN75qPf5qWQu5GmvyqMLqQ7pmu6KudXCefOXUvzEArlRre69g3Dpfg1I2MIjouV7cxd1uhO2ByVq47NdSJJbwKuHcD7HY5tDBGlxkVwonTB5JXqatXyLXRKT04L9ZkNKRlI6rAyhBMCcfDkAVi6skx-9XcerNt7UmD2S2ObNFlFy4aCZqC-ue9ZHoY2HEIEt56N9sQSpcrKg2IAmEqJmoPXcn_KLySsltsnf8fboAL8uDd0pnweU0oaPDhiTEnk84FVlO440ab0WmqtygNTtnh_HYb0xWk0l91Ymx6R1o73OLVz9TOyzWnawH471ov2Pd7wzUYItCKxlkUbyESRWyH5Uab1UI70H1QXPTARyx5b6r3vaeRJu5cPjCHZ5gnnyJhezGLFG0R05i8QC_2iplJORd_i9ZTVEAiRZKtsWHXcIACPMsK5MlQCrFDTJU_LtJifN-_YdvQT4JHuQVGS_1iijR_ewitXfPpo7cTLUiDV0lLWn-9Srt2twbn0v1SjQ2wRdXqosiiQRSsSWjWJP3yDPgTONflx2c2RT_nhn5r-sdh3WalXzJo6qUVUmd2bnVk1NU3dEghg4pA4gSZk31XsqBsRu_4OAlfcRa94bw7uI59Q96neqaiEiR9cOpStWH9S54-BEb0pFatdWUHNJq-rex8tGt2u3hS5xR23Lz5YgpfJ81zMQhezrwRjDKKPYAVP-7XBf4SC1UbMJ-2vgf41enOCOaaZwI5Xhi2ZZlqqLvKdHUFL9DchZodNo4R9hz6dFYubG8nEvQMsrWw-10',
         'p=kFbVGOYyXwIo%3DPsKtOYIB3RdZ_0fs2oV9WKSG0V7xJS41GJcwGrNC6UKQEyoXTSdZ0RicKsGzm4VA8stJdD3GWJ04rf5Pezg4jZbng7nyWWyEElm5F8AH9nDdq2rBOhk7knQUQOAem208os-L7qCKgIuMPasqR1WJ0TkD9OH23HATq67gNmVv640Pj3CR5-03LwJsU_AxQ-kNLF2WXj6kA-cLu66uziga-oBjc3qPa5eUH0PK1ZB-8NW-UtAhN6bw4_Kn9V1ftN3Jpsi9-XzCUtKU3SdDUAXgGKkR0Gw3tW2l3LIkqrGBbc-XAF2HNg_Kc3rQF1xXnqzyNplf5lukUz81JH2Pp7lMXnDsZ02bd3BI3MxBUlIDOfF6_6EAQqVLLf-BCICP7zieWOJ-17ELW0FNyplysf-wRowVD5Ly_CsE0OXR3uknPvG1dXo9qjeHOctrnIcNiNRjWk-ywUmeOl6Z-PpL3BTXjMLYjpzsoqEcZQdhoIHQI3KsqTe6KBqTSqp6V0SQGvkaYO3zY5E35arhO6VNpn2Ye4wDFXevR3R2jxWw5GU3S_JixvxHsd1xNJZwIU8nQ3NlQoP5N9MxDG4X4EYTDulZvnQS6WrWM9rZFe2y3yK5x0G6hMocfATf6cUgsBW2b0VaKkONJYO2zyHPE4UjeO3htOzHspM9MYtflKAD1ZxtywMsajrdqM7hkqvHaLtMG7nG6jBeS5H6TQZUvN75qPf5qWQu5GmvyqMLqQ7pmu6KudXCefOXUvzEArlRre69g3Dpfg1I2MIjouV7cxd1uhO2ByVq47NdSJJbwKuHcD7HY5uOqBmujvItf8vEjRz2JkUc7IixKNPGW3QwMpmWGjOxjpIY5Cl0dgkWRqpjGsxGSoQN0rQyW5FY_HaKalW6DgTm-_yjukDL1pQ4PGmtFsDbqlOckCoSw3d3cyKoTZodOvSD41hHmx3ytmT26ItQ9BZ0j_kYtd1ZM_pDUpN1Ij9wGSQ9o0YQofKhMqbCBy3diXrD5L7Dt5HrBr1CUe3-Al8UkAhTKeDZK0Xrj0CK9gg8pQx-1Z3yEBZ5ecgCXM3_GPwzY5q6GswEmy2aJmm7EGmGVPJ7bx-8mnmGbn0drC2rzZzK1iNzPHNwBVCdovQVpb6Y4pHR3Py9QALJCALOmWeBaVtRroG2S5ELFnP4zXLj10T7ZD_jmcxwn2-W_BWTOzWF8VMkh-43SyjtgvfShPz-juNkM2gQcnf7G_oYlr6YZMHMRq3jLXXWmkX5xhL7bRmwly9DAa10RIwR535219VolF6pxg8WWVMGcQB93dmRKF5Rf2Lr8SBx_9hmSmAOqZb5xJv2ywtX-laW_boCljwVQpMKeE0L8mmOamZhCnDH6GlFc905kLiUq4y2HKr3PgRF3fG5CyuX3JH3ztG9c8QULx_qlu2qGVCjzn74h8TG4BXKEw_8d8ssa5V5aW4xd8A87m52OfXHUzbOiSw-aDgpkzlDIQYTw1LGPS8NKLtsgfQ1gYCWSA49k',
         'p=LYFg4QJ5A6eY%3DVpUK7bR_CQ5udfDRjejusr0-4xE_A91qQLcg5kgQUwKva8BEC6U2jKFQETY2q6KbvBX3K_1slga4IVCOUtfQG-qxqdT553mFlV2AQcpo7q1JiwK5Ybp7MGzXTUIMqmvYUDkYogjZlJhwu6TY7uWkfr-wsuzOg0Grt9hETpwc8dPnImtppPadfTLrvWmvnVNeYMjyFZ9fXqDWqC-XJQxIzamKw49XFpm0hJlu81P-k2OGaKlza5C4SY3sVitZ4hMAQuc_rWGkltgc5Q3sw0tI-fy5cO_Hh2-WDQKVVxZhhTfLPT0WZ9t9gsqOAH-O7EQk4EHeKYz4zVp0N5sXl40blIVcg1KBa0cn0E8VyyH8dtzM1PYOEZfmcg9EL-HyCxLposCp4m3-DzLQwExPh-2vw_AkR9xk32y8cMymOHVp0exD-7qkC2VqIu5TuQVZ30dAuE8lVLQgxtcUgWh96PPPCh7Xut5RTafV8drw42CrjskwOomyrS7AWIpnAfgA5LgxgoUxV2_BaTOUxx6DDB_AqPioTF_qp7wYQfw0DB9Qz7rWpRl8d4P_yHf74T1TPkCTxVnJII4ozypheTv8hsHPyWQPvTQ0ZbVV9w_OYpDbAj0cR-MtxI1GUlrI-f4ERjQcl_5FkeTPpXAOuHzJq4hpqt3bHo6af9mhgb1fNzzYey08drQ6TEiANmUd_g77An6fhM-tId5y4sOsz-iWRZLF7lbRx7QRX6lD4rJ6hE6cYU9kz48TOHjnE7RIFKZZYHXvHLSiXRb6fl_2FYq-1LTDjZxhD7jymdYIgW8eNrz8l6Se-U95wNDxo2Mpq6lzTs3QC38tB2l0hXYV8mHopWC7gYfrqsd4pBR78dJhMlcc_lTBcs1Er-Fcgod1mSgG4FMkwDArGfanNG5ORtc1QBX04ck5I1Iqp94UHS3VgnvFwdyHmYQ00Yr4Lc1MQrLRwRdbXnFGzeVRq7X9E4wZ-MU128hgWo_RMOQ6GJZokAmgB9GMNmaBOggYgfJewoyhhaTDQkhHW4KNLqZcOSSkUiq3kd6pvPzGmv8Dl8IOVEk1aGQSdjy0saBMitmtD_uhqhiDiRWuMSCTPNSFiuoyQxKtrxUOkzEz-KuPq7gh3sgtHXP7UR5FA7FktIEES-WhlecIxBsJQd3UDneO2xZ6xuiWQQ4FyTnZUKZdCrTfz7e26ZGvBWnAmwasoseJoSwzdr_Ee1aSA4truXEuKhNxapYGdP43LLfbJbgmhDKJkb0S0HnTG22q_em9-OWHT7OOMJDQY9UH2zIgyFQNOWBdZhpol9L63vhSEhnj0txB6hitMPZZm8r22QJLRCKiUkGTprTnZVVvdZu5RfH9jxU2ymTRX7HgjbP10532dc-JhnjD59MeJiVo-ullX8O6PegY3YFLQhWEMIorvGAPX7LxwfJiP3ORzImpIMtVzBOQS30zcsJjc_1HJpqwqolfINWYh7dAAOoii_aRJY1NCjuSbJ7W8TlxBx3PbprA',
         'p=w2JgR8oZr6IU%3D3jJeRBx8_TrkLPg-a6br6aUclrcW-BoZ6DLFRXQY-S5hLTHovK80XozmrNbGSH0-C9ylE1ARL-op2i8B0ZzuUCvL5PQo8zFmiR3_R74DsZIftp-9oHH59ni8gq4t9_ctDvoiNaT4UJ31i04lILwTPgSQzjWBtJRkAv3dczT4Czx_pMxU0RRfj2zM4DrZ2mvpqVm5F0ERLZ-ugEtbhGZKjTCFP-G7NRLXOL3vhL9WYGhbB0jCIzAruPfn-rzjMIwhLxOAJ2aTSQWCwKFborpWpL8zlFlWSXVaLt5_-Pd88YobkU-43FaoAlfKnXrFMlCbjTVeC7gHNxgeDK4u7CchylVyVt5XyeRU3LgjeR6sB2Pv1ikWJ5enyow4eBZNX3BbFPCIc_jFYu9Jpr1HKdQ6do0IsEAnUNFKeGHmiLNZUIqfNIl_B3mDtENP8f-O6BYNIOyNMB3QvrqyXZkF-Ici5kiJyglYQrLp8bZLYz1n-Ik4ltQtcCnkjHI6rVS448HvdLVj6-KGlKLXMewVwMQlM7KEnuT9yAJSVUOu_aTWliNbiHP-bifiGm6yG0JI7z8ChQyoUT4NUmxErTtIc42JF2B_T6PS8DE41hYlSndojXWv6E_37j0jT1eCTpADkTKOdtzVSAhgk1KMt67DDV8L3IXiTDUaR7nrE5Aiuh0HH1vBvb02cUZejlhXgXA5ZLDgCYazuCQITri2bqG0E00htj6z-eWmxZSGm6eGZ3q2jNZDJ5BMekFd_4xKr25lSlFxEcxyERiTEFm7VuqDsfm3EDBekdnIW1fnfDzV_KSmLGRzI-U2EfnCzIGBbgqdI0RDS2WX92Cje28zINpHd9zLsXMJr5i0Be6dJo15QcJT5wWovNqv2g6cPhHwmWtW2BIjWOCaAk4_6ByXlb0EgwgQDQHlbZ1sfEA-3hfUyDfENGUqYA0MCJMtVJtsEIWnrk7NL2dh_IV5x47ff9dasZ7VvA7KyPLVAJj5hstFLj9rzJf1zbw9NgLNFU-v6AwzxRJMkhjJF7wvqZyirfKUWeBeEp7xcRJfSAeWS8v68ddhqSbJ1-_cht1qhsf2wQZNm80qmXzsMkIbNLLkNgxwbrtwhY0D02GCoLOYGbkYAsitBzRIx3X0tMV4Y_LqHNTvHpG5EbQaEwMdEupcN7FxQHeCbu7FreF-NA92-Dyv7Lb0lGQEVRhrksJXTN04Jpw9k8as_U7rdfsBTuiJlGoOtOaFzUZ2f2Me5eJewIMxzWuXlcSdfv4HXUgN13vHeLzooN8bCq56ZHCEWmCy0PynqAdHEgCb_pOP03Y_CDTVctj4wYoycz4lDix7O78b2tUagDt3VsTq78jWH5fUEj2UGv71UvTOxDZwMN936pX3qT4RrtU1xxPOSkUkvvvhBUejUW0W8CZrYY5wpOq8QnZ3rN9Dl9MxDlf_btWTcRqhMin5EFI7jx6dranoRHcTg9n1-o1pgjP4Tcp0DY8Pz0h_96uwZI5RbNVcLxWo',
         'p=DYdVi_XPUOzA%3D7ioCfKCMWbIEZz9bkz2QihC6r8m7JBZPw54CF-pdY27YctR2XwrKgfmD7A9MxodExuRd6l4WNHs-gqP5ecSQnJtRkZDUmHcRrr-K-GWSz7eXA2jKVB0ctEH2Dg7y1QGXgcWR5ZFx11MjCLuFkui7UM5g-O6ZKpAQbSFka_dkGXRxMlMR6h6ndy-xBBzjaSDV7wmCWpjg-6u1vulPzQCZlLtK9133Q2FRWfip_iu6KtotJIixxUVU-RvI47Le0PHSOADjagmM93bQ3YuzrR7vHaDMXTzPyaWgJNnthdBhZvHnYoLRVGJSF3g33k1HWOXIXmAZ_Qs4K1yA-V75_u6-Ye6n0tky_Qrrg3538tVOsNqSezsc_OyGVYWg-WzwJhp8UbMRqT3v8YVeRy3xe8m5AhNMY7SX7dcQu3uPIxHBLsod_ja9E9X_zGTzc7zJCLT-P6kvHhADpMGyZDV-F1A6lXGQiSbLBzcDqO5xeZymConSf0RpxjYwcCAdkSi4SgbAwa2jHaQFnZ047QuZu9FOYrrzw9O9FKMydnkiVornvF1uf1jjNzq6-gyyVHk7XxoVXIOjELBPljDcqPca8WVKOyWi1LbfrzF_fZ5ZeUE4Hb7jQHEm4r-cP6ShzlgvzNA8MJGL3T-C_-sG7XecDbkZpKPNUkiB4wXkKR9R6MEc1OGgOmAF7K4uYKKPMlLPy39G2k4q6vgfYGCGBU9xuMkJGBkNXWpPabjdX0ba_vJI_RynjNJac061jRTw62MTe0yY-ofFJHl0jkYAQp183wb9EXfasNxVfa-oXiYhp7SOLvkqTIfeq494V11Fm1n4E_pIx3bVIjvBagMixkvmxP2niq69ekona91SrVbRhXEWC3uNwWOyw-3XqN5wHYV3eCV1X-T3W3ZCielvb36Ir2zFvoYd4GNIMObqpxQPpZ5C1z5FPUs_BO8aeeFUS9OKH3CAC-CApJI05fF8QwTjv2LYJb9pOQhVl7qsU3ezf7J1Wx07Vj5iHin5fgOFztat6KQS0ffB29b29SjeKEfLwLsIXiQe4fTZsc7Ah2tWPR_N0Q9PVF8_YFbtX2TqAcvN2OZ0OQ_a2rC2T-s5BBIef13iq1qz1vurPSqSkwU8cn-AaTbgUQih2BO6T02Jh8_QNPHth1LJ1KexdT2kbRhI_VFkW_3LNoEPdFj_g43-Ns4yywuMDZ0iRKH9B3UmUAGinUKhfsjPmsOl9B5XzTupk2KcwgxLAA8k77U9CtbhOGgtip_jNmfCzj4A8FJQfEBPOm90c43W8RJmNjcYDGKoXLVBTJDKionk6Fv9_2g7Yk-QIDtFE3XwUwLr8fN-5xRVysd7swiIbooGLoQVIWVcBZYx8VcuROieScD6cP6YwAZuw0v3ah1paH0JNlHZ44ia8Y4Zer3AfCeEIhaebd42HRsxiybFGRTec-nBKVi7_TcJsUsgph-elhTNHMlAT2zmbhsEFRU7vvlY07630WGocRMpGF24QdMkYaPU8v',
         'p=ecTMBiVxDAfc%3DeYMRZIJw4FE_K8Otb-sIosz0uw4BohZADRWxPYwVqXa5zL1TLMu-iiHcxOzGi3vYo1tLIQuCphsFlHlZZohsWVgXYjpxC8kifPVmGHi5Mz2eMdKT9n34zT4EpgkP_mm65JnRZqz_PZhSKAYBaZ21wbAyI5LgjedE2jqA9MLfyDRPaoCeRWG30m1_HfoUmuI8E1aZ0Hiupj63PbZcR1qc3EFHu1Xc4Zc_1b9uF4BhM-O-SQ3ceLMg_gB6S1hF2F-iPxovuubE_kH3OFgatjIdQLBHU6uZEIbKky68tbYz2ReDCunBJH3g29bKkwCSnpRagPexFFyotBlP2RHEVcr3yG0U1aB-8QS8EHMO_G6gPAa6rP59Cz_LimBB0viUk0Am-HmLAlrBziJDQyfEwRYEynM5o4ymsDi40WlpFFVlbcF0mLMzJUYj1K2n5YpTSWwkZ8YjWUnAYEVoe9FzX197pIQkNoN-cNU_cFya3NNTkgb2GgAhSmke5ha2TzIa1-rDauiFOyoVkYNQsyYw6qQ3bRfowxvV3BP0GpLNwu_oSf-raHFoQTwsZ3bHPM0UUQtzN3VFuvp2kKuKYJ7KuWOB_6Wxg_CvnQBp13hRZdOB9_F9Sd4b-l4Gyj9HdYCVZn898fd6QZH-Y54R8r05EjomczcNhZi6W-Zxs2T_trAJz4dL6QMDgDvlfwU7BBNBmk5xemVemg62xdZ6Wgg4z5n5V9IXFIala5RwNv8QP8Sf4HavWMPqDfuYazPavWXruwZRccMsD28KIqjOb-JNGLAGE4z3LslsxuEB18npAQL0VGq61rEnPxyW_ft3ZqQdZ5hJAZP35KSi6oa_tqpUPcy8AybnhkS-75q5qcb6nTlkApBZM6C0uDgTdD1GG_mtamd1wA0p5C_e4_4-xj4rvPPstRCUT9ODqSt4SUD6OCONxJnfybILW3V7HQpb3GQQ70q0HCUCBXwSp8_m7fmb-3uRH9ssa6HpQu9uCOk3yivUy-HBOiQQsp5PPbCnTFwSdaVmndXwlY-fFvF1O1l_S1Dxnt88V6pPQxfxq8S56OH_RPQirxciWMBS-JQDmdJi3s4itUcmL8SYsLqdTcmQqj9k2ULInzYbqi1RTkDNJwp4wPA5fyrj0NSwp2wVBQN5iwUW4shzgHBkVWO7fp-ux_YyCcD3bfW8dV2IDJA6CYDNpwwZIlUOZ8AokHIhr7-hoIcwQAOSwSMSLK3TS0xEVyzsU1GvMEn4X7e_Deztsg-wG8r0MTtZSuw0F__Am5lEYbPz_ke8Yj6AXm-Stzlw0wgSlbhQWoxRF-8QYE1W44EphSZMOzTs6CTNh1MLtHEy1h8Z7J24KKwFaADKqEs1jYQjl75a00r3yTHU9bXLz0hgeZIDeEe6GAdG2SCcNqv3FgsyXmww0miaJl7T0gQTrA4a7xEjuc9gPLrLpRbAvF4OQOIomVo7WnVJMVy41EUwocJw9suSwHSNwwtGgD_0Mr1ndnlIEZKJGlFM6',
         'p=ecTMBiVxDAfc%3DeYMRZIJw4FE_K8Otb-sIosz0uw4BohZADRWxPYwVqXa5zL1TLMu-iiHcxOzGi3vYo1tLIQuCphsFlHlZZohsWVgXYjpxC8kifPVmGHi5Mz2eMdKT9n34zT4EpgkP_mm65JnRZqz_PZhSKAYBaZ21wbAyI5LgjedE2jqA9MLfyDRPaoCeRWG30m1_HfoUmuI8E1aZ0Hiupj63PbZcR1qc3EFHu1Xc4Zc_1b9uF4BhM-O-SQ3ceLMg_gB6S1hF2F-iPxovuubE_kH3OFgatjIdQLBHU6uZEIbKky68tbYz2ReDCunBJH3g29bKkwCSnpRagPexFFyotBlP2RHEVcr3yG0U1aB-8QS8EHMO_G6gPAa6rP59Cz_LimBB0viUk0Am-HmLAlrBziJDQyfEwRYEynM5o4ymsDi40WlpFFVlbcF0mLMzJUYj1K2n5YpTSWwkZ8YjWUnAYEVoe9FzX197pIQkNoN-cNU_cFya3NNTkgb2GgAhSmke5ha2TzIa1-rDauiFOyoVkYNQsyYw6qQ3bRfowxvV3BP0GpLNwu_oSf-raHFoQTwsZ3bHPM0UUQtzN3VFuvp2kKuKYJ7KuWOB_6Wxg_CvnQBp13hRZdOB9_F9Sd4b-l4Gyj9HdYCVZn898fd6QZH-Y54R8r05EjomczcNhZi6W-Zxs2T_trAJz4dL6QMDgDvlfwU7BBNBmk5xemVemg62xdZ6Wgg4z5n5V9IXFIala5RwNv8QP8Sf4HavWMPqDfuYazPavWXruwZRccMsD28KIqjOb-JNGLAGE4z3LslsxuEB18npAQL0VGq61rEnPxyW_W9up0jAwCGx3ezwv2p5q58tsbmSKpHgXHlH9m3MgMGmOnSudKvOHOryW9fb4VU-9-qn3jztdIa8VIpmlIiO87ZNl00OhfHmeldlKcR8bevsI89NpWdHh3YN_XFJOvc3JxvB9C0luLCNJxZFWCxmMHpOVrI6dnst_Wl__SCEeXKq7BCB-asDLD1fJGeFRIllHfdJ7uCJwdJGiXZhoKzWhLjozqtV_Fmy9TWWIkZe4DcKdOxos4EkiG__z359hkw-pqnXDbXm4VpBoYXPBU7G79AGI01-5FXHS2yZbtULct5jGF6u5pokWw4HH_zDLbUxhUghaOHDD0rKoXRcpQUsqexGxAoov7qAVL8P0US0c4HLsN_xqxygyhiwiasf1w4aWfqy3saxT0JNwdjRtzX1vDZzBv4sIN-9NX5IN8R39U94hiuWYJAXfgaKCyvdxv8lrlEY5B4yPgA-dwak87R_kLxlfuLYoCbFnikLX-lMbocZ5TtsMZKyI2yVvZIunDJlFK6U5AxA8uR3daCwu4SJu57TEONfGQho8uY_txFOG1uUnBCvlmPoox3-GYAKaUWgHBYLos0wo-AUJKReIZCbxZEwjYmIv7jzWKq2jFTHVyoHHQsnBvj55adr444GtXqAsNX-ZnN_XItKBcxoswC5gGRB_4L3TOz1FtmqShbjawRIo',
         'p=QcTMBiVxDAfc%3DeYMRZIJw4FE_K8Otb-sIosz0uw4BohZADRWxPYwVqXa5zL1TLMu-iiHcxOzGi3vYo1tLIQuCphsFlHlZZohsWVgXYjpxC8kifPVmGHi5Mz2eMdKT9n34zT4EpgkP_mm65JnRZqz_PZhSKAYBaZ21wbAyI5LgjedE2jqA9MLfyDRPaoCeRWG30m1_HfoUmuI8E1aZ0Hiupj63PbZcR1qc3EFHu1Xc4Zc_1b9uF4BhM-O-SQ3ceLMg_gB6S1hF2F-iPxovuubE_kH3OFgatjIdQLBHU6uZEIbKky68tbYz2ReDCunBJH3g29bKkwCSnpRagPexFFyotBlP2RHEVcr3yG0U1aB-8QS8EHMO_G6gPAa6rP59Cz_LimBB0viUk0Am-HmLAlrBziJDQyfEwRYEynM5o4ymsDi40WlpFFVlbcF0mLMzJUYj1K2n5YpTSWwkZ8YjWUnAYEVoe9FzX197pIQkNoN-cNU_cFya3NNTkgb2GgAhSmke5ha2TzIa1-rDauiFOyoVkYNQsyYw6qQ3bRfowxvV3BP0GpLNwu_oSf-raHFoQTwsZ3bHPM0UUQtzN3VFuvp2kKuKYJ7KuWOB_6Wxg_CvnQBp13hRZdOB9_F9Sd4b-l4Gyj9HdYCVZn898fd6QZH-Y54R8r05EjomczcNhZi6W-Zxs2T_trAJz4dL6QMDgDvlfwU7BBNBmk5xemVemg62xdZ6Wgg4z5n5V9IXFIala5RwNv8QP8Sf4HavWMPqDfuYazPavWXruwZRccMsD28KIqjOb-JNGLAGE4z3LslsxuEB18npAQL0VGoJNCAarfMwzmTI-nmuMtr_EBQNeyJfDBu4x85e5T1vdr7VwzI4Gy1l8ckacYfrXKyiZGdZJLCK_VtEH5MSSR205hu4jrH_lmMiEZz1CF5LLeYjAdCS_YI4loz9aAXk8CuSJVF8SJ16AENJz7CX7t0Xj_Oh9lAYF09v15Xt9JeCc6AxYll1vSExoTMnqKheX-tHWUFHGTWjlt4u8gBbt5eLb-9m9l7Dtae-_CN5O1iaXgc0YzsX8YoXVjG8nw-jNzXrBNe4fKbj16fFEEKFWpVJ-zfDvRKT77LxyD_jc__zEGHXai24K9u6qhv9SZc_tw99l7VQ0vxXWjr3Vsha3QGqwuvyKeIE4TxQPTAVgYzjhzFqY8ny2xvu0oy6u8gInT7Oh4g98qj9m6unf1sTtGfp9wSgSaAi3kNvLZatRHLJCbUEStWVKwQz69Kk5IOIYGUBfmU0mM7PooOwyGs5zGe8rnyV71BjS2xgTeoAdjhjpSKSNUSfs521VHu6hS5NoUNHkeYcZe4JGGk9IAopA8qkllOOucDfJpUO6-toj9K3-iwaBN2zsTQxllh9i0d8qsFGz8HDu0aYZT8tZzslT4M80yW6CvkA9DuL1TYy_DHihjER5XT4YmsN0g5tezlAmr8FqaRvmapko6HePt2VV4nkQnVVXFCx4wMtUAdDD0H-61h8PZi58uD5S',
         'p=5XPkPrW1Kghg%3DEfRWZwWkN8guRsb3NgQhKYSFmWUhTVl3rC-YIy3QD7flGvcBXZINVjnLApKLJJ_YCPJVAS_yxPdoYyYAJzHwEQUmimY34q_tcFKCoYZ8jQudvnrW1Y9JaUMtABN3G0DaCUQxniDCbZDYq-DBkqdYONQdUnqB5JASDO-t74UCBIKgme6b6rKvYyialvbYawDuzLADrX0Y2tou535jNbAmHa3zNa2o5VtV7nU1ng_qC8EzHEY6Btl_9xbfn8AwhiDHB7ahM7aPiWslQGiJZvsBmtHsITvgsWdT7x_W4ClUn5O5G9CQcKtOh-IHWgqK5rxBBLEYPYj1Z0rbPd7afIGpgiHqOYEbB0FzJwSgVsOKBeUkZG3-iGMdAPtz8cg4GpjXc9pWA_Mzv54z59QlkqJualxpJf0Xy1OUbM0U9qM3ZP4EqgVBY3n7vAbeQ8dEi6w4myYsBCtcSMWG-RQVksmDZxLcO5s1LxHN5mCblHy08m_6r_mLbFVhcoZtvTP2XdamQG3unWEyW51lnFu48rfhf2Oj8j3aHYXERjiGAtMJDbma-imFnR6XOaElftdN8kHkW8tNnMSUNvo7MLwskMQzpLcUFzGVvnxE4sSZEUSoUm_SX1kLOROC0b598DEZCpHOXGWN3_26OcdA466vey8pyNuUfCvoxRUgZzKmKxLBv6cBQL-QStjLZy2gN7eCuDRdCedGmYePEcAKydOwUuLqKcTAADrFUmtQJDodUb-RB8Pc8WvpHgB64z3zXyoyi0GBm5c32jGpgeEqDCRcQr6mzblGvNqlndXgbVEB2wYvNcPGKRtUhOXIt4QyZTeC85Ics9mrT39E7Fon99Nwr_ywUELBPTWlb-JRL1LtMT6vqmW8fJaU67Ke_hyU8oKXqqkbBu3Eee-oLDV4VLgRP4WbTsEmMuvhhdNDNUr2gIjyud-IyO0oG6t6YM1NgUlk2_HRhAI3YcojMV9oWbFiGsX7kCPygCymdJAQxGtYoJ58Q4L-D3AUTZiqCNV5kBJX-80QXml_bKSnvGUV-SK2RXvOPgoQYMuwh5cjwYZLTMNvCPd2RjjgTutnT9XFrCow5QbAxCgPEoCEJ4ZdPoh8XuZttbffddu2tNO1RE2nBkuDvOevNlbesgrX76TlwIP1_gsiQqIC8qixqEJHjiB-KdQgQ5KYBWxe_4U1vavrdo407ZgCwxVgLTtjpib2qc3KBbXUuuQOkYToKvl5oQIIDhDPlUayH4HTNtprdUKlvDCVoBwUiCnM5VdMw03C3ozsusujs5WYAX6dVPY6Ob1jCPQp9WbhYuY12CT8y4BoAK0LOEpuPVYLWhEuXsZrQzwiZSKhwgoICE8In6ynq0c5ivYUf0Pop9G6nwexITOWbDXlguBR1qa4e87HISdJOJ4kzD1akEhn5S_oXWnpiuiudAP31ngpUj1zbm4Dl1PWxB4zNgwfF52ZbbhXnjc1id0iBIZDzR9crBhsONNq5qCEyt_e5AXf3_sLgQfD',
         'p=fUJybc31G2V0%3DUiVImOW0Nxha4Y1qB-PCfe2zXBUROz8uZjZaDv3iOUGlgzzih9LKa478lWc5nbbcJ1qC3tIb4d0mlQ_vcghc8Lh3RN3ITjjUTAX7WyU9t3pigir2E-PUlQU_nXmAFucctU7fWaIp3vEUyNJwiefxM3uCXlFdE4r2fPtLdEJMkGsI-Q_nUZDXE5XSfPU1hmRM1KzMuYxaK_jkQOkYDa_I_OWglXnzngUomkRR1JSvZw8oDJhJrf97iGdtJ6Xr6klZNSs-Wx9rHcpaUAxUfONd1pL0C3gxyNmL-XkxxpYkW-MModAyHWHHzwT_ZrZEfeusFDVZ6OUsCn76ajAQtXRmvJv5jCFOj5epRnPjARLaucekWFqAKqoeyiIT4ebTs3Ww6qqFHafXGMTw6AOn4z8PxyQZpzu7xuPBf3BmMlMTCqKunkJ-yQVSzVvla4Ok6RnhXaPoDwCV0Fvj-xLMjGYfrNR6CSxSZh4n_0oIHI5cLXroz9uC0i9wGPX0XOob3wpO0yv5rgBUvEGEsaQaNXUbM7rXCVXU8Y4QEC7fBS3HnaiCzUCONxOi8B_htIkdNFJunmQVDNVfEY2V2s7Zf5h_OcWrCG9AORnIa-eHv2SuqGvjMCl9aQIdhJh5h96dsZja0boP_0OyXm6xB5igDoCiYs1jXoO3dGApFBKUhE4XKQIBUCwaXn3AIXq0cOXl6E1m9wz0wmga011ooPuRS-46kqdtoQTrRZKa_8ehsTT97uhVIkkCZTpAUWrHc1EThuFVuoUmA4l1pvluBdAtnYnXVopcKXkhSOCbMPW_qoRdkdZbePW-h9qlBQAWKFofGNi-zG4KqcUKJvYmhyP0WnKEq0ObNLwCgnEwxaI5LLDEnQQxMnYeFlZYdLNiwWw1ZIameP73sGbMAhagtHb60xjWzXqn0J5DSksogKyueVcLOmFlC1f-Iu4053e3nhAvKVYfsGexaN_FZOxR0AK3Dvh_a2ye_WRcNo0tsfVj_Fd4TrRtJi8pVABk0Ei6YWnyD9qpC3Va-pqu0tjHRZ67zVXNl04ggMWmjJU18jNs1_SD180k4F4s41HbFFWIdfl9kEeGiMVPDzUHxf6L_ZPvZYOxi4p8nwfpHJxKBtCyiBnhZPZI_BJQ2RGX6O52OeXISkUOsdVFpueiZPGzBiqX4yMYii25HNObhu6SW-TVWAzEKS6qGVvCixOAu7Dlf6tlyzoD6E3koj7nAo9ErOlnXDW4bEQS67W1Uh652Y1LdxASfsyrxB6dg_Mh4J6PgMfpAt192R3qHbGHfijO9mB9K4z89Sg2otxLRLaEZgguBvohzYnFCBVjpVQ8BIkxXmoA6JfDs5cBX2wNbASVFoaBt5K6x-8oJJEGjb9Z81z1AI0cyNH6T1wy9aA9O6DjSh5vWAxzLKCjHYvTWzMPT1IMyDlm3nPZjWoUX2-W6Zi5GGQqX-0aiUgeAcLZfbeIAmwUSoN6kIuMPJHNMH3ow6A258Vzp77_Ms5Y-RiBDf',
         'p=pUJybc31G2V0%3DUiVImOW0Nxha4Y1qB-PCfe2zXBUROz8uZjZaDv3iOUGlgzzih9LKa478lWc5nbbcJ1qC3tIb4d0mlQ_vcghc8Lh3RN3ITjjUTAX7WyU9t3pigir2E-PUlQU_nXmAFucctU7fWaIp3vEUyNJwiefxM3uCXlFdE4r2fPtLdEJMkGsI-Q_nUZDXE5XSfPU1hmRM1KzMuYxaK_jkQOkYDa_I_OWglXnzngUomkRR1JSvZw8oDJhJrf97iGdtJ6Xr6klZNSs-Wx9rHcpaUAxUfONd1pL0C3gxyNmL-XkxxpYkW-MModAyHWHHzwT_ZrZEfeusFDVZ6OUsCn76ajAQtXRmvJv5jCFOj5epRnPjARLaucekWFqAKqoeyiIT4ebTs3Ww6qqFHafXGMTw6AOn4z8PxyQZpzu7xuPBf3BmMlMTCqKunkJ-yQVSzVvla4Ok6RnhXaPoDwCV0Fvj-xLMjGYfrNR6CSxSZh4n_0oIHI5cLXroz9uC0i9wGPX0XOob3wpO0yv5rgBUvEGEsaQaNXUbM7rXCVXU8Y4QEC7fBS3HnaiCzUCONxOi8B_htIkdNFJunmQVDNVfEY2V2s7Zf5h_OcWrCG9AORnIa-eHv2SuqGvjMCl9aQIdhJh5h96dsZja0boP_0OyXm6xB5igDoCiYs1jXoO3dGApFBKUhE4XKQIBUCwaXn3AIXq0cOXl6E1m9wz0wmga011ooPuRS-46kqdtoQTrRZKa_8ehsTT97uhVIkkCZTpAUWrHc1EThuFVuoUmA4l1pvluBdAtnYnXVopcKXkhSOCbMPW_qoRdkdZwjT-nLoxQC9bAJBjFKPYfvjk_7aLIRyqLPtpFS51-WFOqXh9g479Pb8AfSdoZv_InvKPFMWnzRY-lfGdIDMp_4z24BVEFOoIVIjKqEUvgO7zyJRK_TXpqfRC0ULmxOBa05RipXFRmdlsZuyHWbhOgvEzzEGI92YFSAUtg2ivac6HJNltgosxgLc9xaHZNOTIig1K0yOGrEgSzKc-W4PrUje2F8K3O_twpoGi7hb_Q_YN5IXwrhp0ZSarIIj5yEKgiac1DAV0r6KbuS1Flp9EgcX0jJvTs_TykpiUIWHUb6oyXNWISW4nE2zSUed2hoRpILuK3tCfUpCAEXtRunGHP7fSI7Z-arW2hvxWYaw_KoKbM8dLgWxTSGakrgEdFmvzqYOb6tgiNAy7QtVBqpN_yuWNVvpLeDJi5oA9SEcJscsMo9ZkceCdoYbYIYIfxekuO9Cfh5Lq9B3aJVVhF6R3ks4izQtYr8kQLnkVXwTpqyKgBsi-eyroMYinNA1k12L4wfulyCKBwuOAIP3mFlMNbPEqQ_Q7Bu1dGreCT6Di0DiTJel8rC5pC5oQQQlnATtbRWU3gObvOh0SGuKSoQ0UWebp3oBRpVxzhIcgJj3ovtqKe78Adx2p7GsGQ1gwz1Xbtt-Jln4aNMxkEmIW17MygcJj_yY-EJnCVmUqX-Wb9Cdr7JNHFqirX26',
         'p=3cTMBiVxDAfc%3DeYMRZIJw4FE_K8Otb-sIosz0uw4BohZADRWxPYwVqXa5zL1TLMu-iiHcxOzGi3vYo1tLIQuCphsFlHlZZohsWVgXYjpxC8kifPVmGHi5Mz2eMdKT9n34zT4EpgkP_mm65JnRZqz_PZhSKAYBaZ21wbAyI5LgjedE2jqA9MLfyDRPaoCeRWG30m1_HfoUmuI8E1aZ0Hiupj63PbZcR1qc3EFHu1Xc4Zc_1b9uF4BhM-O-SQ3ceLMg_gB6S1hF2F-iPxovuubE_kH3OFgatjIdQLBHU6uZEIbKky68tbYz2ReDCunBJH3g29bKkwCSnpRagPexFFyotBlP2RHEVcr3yG0U1aB-8QS8EHMO_G6gPAa6rP59Cz_LimBB0viUk0Am-HmLAlrBziJDQyfEwRYEynM5o4ymsDi40WlpFFVlbcF0mLMzJUYj1K2n5YpTSWwkZ8YjWUnAYEVoe9FzX197pIQkNoN-cNU_cFya3NNTkgb2GgAhSmke5ha2TzIa1-rDauiFOyoVkYNQsyYw6qQ3bRfowxvV3BP0GpLNwu_oSf-raHFoQTwsZ3bHPM0UUQtzN3VFuvp2kKuKYJ7KuWOB_6Wxg_CvnQBp13hRZdOB9_F9Sd4b-l4Gyj9HdYCVZn898fd6QZH-Y54R8r05EjomczcNhZi6W-Zxs2T_trAJz4dL6QMDgDvlfwU7BBNBmk5xemVemg62xdZ6Wgg4z5n5V9IXFIala5RwNv8QP8Sf4HavWMPqDfuYazPavWXruwZRccMsD28KIqjOb-JNGLAGE4z3LslsxuEB18npAQL0VGpGHl2pCExNCmlOzDe2k53qnmuRB00rqAeF0VcRNZdTy-2JguXtywDmE0MmkoD9849cNn5d2DH8oJgp69XtByDTJmb4XMtv8_dQcvyMicjPrSCkgtRJrim3K08RZQYjmUJVyX1nBFjl1S_RTFHi95dMa94_X0qQovb-p6Vi04ZSGW7_Y6z7KbpxBvYFLM-IGjPlM-sjescSaYqpiuDrzPfc2PkYkCe4go0YI1N7jAuIVjr6Naj6wfawe998u_fOzpVM9vKiTmtY6J_OCYGLz-R6oyuttv7nYpLaMrDhgEQulap6gBMiDX28cAOmig8atRRjqW8yiTvo0Ot6lAY4wDhdE0I3Bk5WzHBn2zYO5kRI-WsO2aObqji9h7AWOeFKFjyi1o0eQ5VutpBGWhcfg9LzorQwlKe0DuTMFg5HU4dWz31svSANZ_zMNt_L4N9zQxaoV9p85f3DJjFoscKbWVB3WaO6ajShWYqFmuDSSdpW8ROp65edThRexxyFmDmv8n60BGDxMBssDie37ClxBHmJ-ge7gsonvQD3XOUtTx93dtAlW0wapN5sBQMYFrK73FqVHvsTL4tyyd4PVl7eJ9ncehO1SSwjK6JrlpOG-Sd_gHy2NC8qz4bZXUpDMM-55yFNXjc0TpCx2S6MNIoWqZgjiSBNbzBc7nX85YOfACkVue5_WRUbJegY1',
         'p=E2JgR8oZr6IU%3D3jJeRBx8_TrkLPg-a6br6aUclrcW-BoZ6DLFRXQY-S5hLTHovK80XozmrNbGSH0-C9ylE1ARL-op2i8B0ZzuUCvL5PQo8zFmiR3_R74DsZIftp-9oHH59ni8gq4t9_ctDvoiNaT4UJ31i04lILwTPgSQzjWBtJRkAv3dczT4Czx_pMxU0RRfj2zM4DrZ2mvpqVm5F0ERLZ-ugEtbhGZKjTCFP-G7NRLXOL3vhL9WYGhbB0jCIzAruPfn-rzjMIwhLxOAJ2aTSQWCwKFborpWpL8zlFlWSXVaLt5_-Pd88YobkU-43FaoAlfKnXrFMlCbjTVeC7gHNxgeDK4u7CchylVyVt5XyeRU3LgjeR6sB2Pv1ikWJ5enyow4eBZNX3BbFPCIc_jFYu9Jpr1HKdQ6do0IsEAnUNFKeGHmiLNZUIqfNIl_B3mDtENP8f-O6BYNIOyNMB3QvrqyXZkF-Ici5kiJyglYQrLp8bZLYz1n-Ik4ltQtcCnkjHI6rVS448HvdLVj6-KGlKLXMewVwMQlM7KEnuT9yAJSVUOu_aTWliNbiHP-bifiGm6yG0JI7z8ChQyoUT4NUmxErTtIc42JF2B_T6PS8DE41hYlSndojXWv6E_37j0jT1eCTpADkTKOdtzVSAhgk1KMt67DDV8L3IXiTDUaR7nrE5Aiuh0HH1vBvb02cUZejlhXgXA5ZLDgCYazuCQITri2bqG0E00htj6z-eWmxZSGm6eGZ3q2jNZDJ5BMekFd_4xKr25lSlFxEcxyERiTEFm7VuqDsfm3EDBekdnIW1fnfDzV_KSmLGSRcV5P3lWaVVc8RjRURHXE-tInJR_dRF2p9pGD4CCIEhpPQrEOIfZAwi6h8wITz0gCucGERx-fN9TXNL-SDkz10y2aiPQejT6oAY9KQcZJ8OVJIQJt9ekC3dgSc7sTa2tGT9npD8DiWYkQKQsZ6BQM2y8O82rjjAI28l11v59xaV6KVn0ni26-n8DELf1ujcdT28sTPKC1p6JHhdiFegQ1-VDySnWcXLsJTRqLwLek9BqrggF_4DVmD32kwfcVNJO4At0t7rDYEGpkyo4NDb21mzRISY5Cetz_kME2zhZGftUyTHf17Ky10lnJXCywrNSehV1ebs-tBFXPI2hYrAdxFuHU1FFZwMIKjdRzjDa4l2Ytiih0U0rO0qOlmMdQTPWi6DuM5vliAA5VE4hUmPzBBmJqibZAPzS090g2Dx3I-MNpY2Ki-MIC9tSi18Y0VVtbtcvWkBcL0PYH1OHnz_I5ckB1vPhHNbVfmqSV9uPHWCOgTjOgSow1e1bAnAnDfqkWtSw-AzXjMMbuWNIWmCT9WXdJVocFLlcktd_kQXvTmN83vxj3y-G6W5kydcYVnpjrWKlS8EHV7UDrD8fjaYctoevqHPd6-2qy6Jo41F-MERyaML4BpfAkzhCfOLP0w9v-P6S0PRQHgyNMpjEUCH9mWgN29kR8HfbcFGxTVIUkKuHg_MgCIrY9',
         'p=vYdVi_XPUOzA%3D7ioCfKCMWbIEZz9bkz2QihC6r8m7JBZPw54CF-pdY27YctR2XwrKgfmD7A9MxodExuRd6l4WNHs-gqP5ecSQnJtRkZDUmHcRrr-K-GWSz7eXA2jKVB0ctEH2Dg7y1QGXgcWR5ZFx11MjCLuFkui7UM5g-O6ZKpAQbSFka_dkGXRxMlMR6h6ndy-xBBzjaSDV7wmCWpjg-6u1vulPzQCZlLtK9133Q2FRWfip_iu6KtotJIixxUVU-RvI47Le0PHSOADjagmM93bQ3YuzrR7vHaDMXTzPyaWgJNnthdBhZvHnYoLRVGJSF3g33k1HWOXIXmAZ_Qs4K1yA-V75_u6-Ye6n0tky_Qrrg3538tVOsNqSezsc_OyGVYWg-WzwJhp8UbMRqT3v8YVeRy3xe8m5AhNMY7SX7dcQu3uPIxHBLsod_ja9E9X_zGTzc7zJCLT-P6kvHhADpMGyZDV-F1A6lXGQiSbLBzcDqO5xeZymConSf0RpxjYwcCAdkSi4SgbAwa2jHaQFnZ047QuZu9FOYrrzw9O9FKMydnkiVornvF1uf1jjNzq6-gyyVHk7XxoVXIOjELBPljDcqPca8WVKOyWi1LbfrzF_fZ5ZeUE4Hb7jQHEm4r-cP6ShzlgvzNA8MJGL3T-C_-sG7XecDbkZpKPNUkiB4wXkKR9R6MEc1OGgOmAF7K4uYKKPMlLPy39G2k4q6vgfYGCGBU9xuMkJGBkNXWpPabjdX0ba_vJI_RynjNJac061jRTw62MTe0yY-ofFJHl0jkYAQp183wb9EXfasNxVfa-oXiYhp7SOLvniF9Vih_x9nm6SMcy9dQSOZ5mr-NJ4i1vYYGXu7N5bYRjCCIpiAWoqmbAuontwE3gg2i1ZB-KBKyJAeefx5LpES2Q2DKSbl6BiYVeMR3jmxlfDr5THwkEjf1dJqT8rKKQNtRV7TWuF8MQ7YDDHZH-w1zO_AICkb6LOu4zHMQYYwTKv_EK3_IxKVq2GX5tpqOyYYk1uztZu1bdCm40MUOHa7-kfI4_1J14IG93yNebdiNwN_xZjOvmqjrs_md9pAbED5JcesMBT49OxONOe_piDwHJ7Uk8DXo8KdqoDkCWR_ORTq0DNjrklkPj0awQuz7K8AVen1R67iSpzi1KF3be2r2PrARLetcZjWrOjbL0Z_7U8sVlyK49i4UoDUEXckeUwS1y-eJ5UwawQGvwLKBswNc2YYo2AvEzdzGixUSyLvUJ5R36xPDNvhA1mscsuSUUCrAQ41Y_IeAKTEXig-a7zD0EV3v8tC-06rvWrF4i8t0Wx1FxcWKlGs-ddDiwtfc3Zf1ECgXcm6DsgHP9KgByLi4jJb_KQssSwBB_a_gY-bdA_YEGIVyQNKAAs7JlUN5oEA14SvTgiyDo3kSTczAAHPlDNSnA70CPO-N4gGcTECjC2749PuijNeZ_GaUfsF4RlJOGjVonKoOMGIn8UQvUKGKd5h5wM6rXTCgZe-gQAd365-sZ27DMxgB',
         'p=ocTMBiVxDAfc%3DeYMRZIJw4FE_K8Otb-sIosz0uw4BohZADRWxPYwVqXa5zL1TLMu-iiHcxOzGi3vYo1tLIQuCphsFlHlZZohsWVgXYjpxC8kifPVmGHi5Mz2eMdKT9n34zT4EpgkP_mm65JnRZqz_PZhSKAYBaZ21wbAyI5LgjedE2jqA9MLfyDRPaoCeRWG30m1_HfoUmuI8E1aZ0Hiupj63PbZcR1qc3EFHu1Xc4Zc_1b9uF4BhM-O-SQ3ceLMg_gB6S1hF2F-iPxovuubE_kH3OFgatjIdQLBHU6uZEIbKky68tbYz2ReDCunBJH3g29bKkwCSnpRagPexFFyotBlP2RHEVcr3yG0U1aB-8QS8EHMO_G6gPAa6rP59Cz_LimBB0viUk0Am-HmLAlrBziJDQyfEwRYEynM5o4ymsDi40WlpFFVlbcF0mLMzJUYj1K2n5YpTSWwkZ8YjWUnAYEVoe9FzX197pIQkNoN-cNU_cFya3NNTkgb2GgAhSmke5ha2TzIa1-rDauiFOyoVkYNQsyYw6qQ3bRfowxvV3BP0GpLNwu_oSf-raHFoQTwsZ3bHPM0UUQtzN3VFuvp2kKuKYJ7KuWOB_6Wxg_CvnQBp13hRZdOB9_F9Sd4b-l4Gyj9HdYCVZn898fd6QZH-Y54R8r05EjomczcNhZi6W-Zxs2T_trAJz4dL6QMDgDvlfwU7BBNBmk5xemVemg62xdZ6Wgg4z5n5V9IXFIala5RwNv8QP8Sf4HavWMPqDfuYazPavWXruwZRccMsD28KIqjOb-JNGLAGE4z3LslsxuEB18npAQL0VGouI3ciIAVtB-q7Eht6AxIuvH8lntkTdmThIy2m5wZ_vGHr8kStVnp_vlcVPGHQs7bEKiXIHNDjfrC1VrYkbXPkxOXoCiDV1MvHnSXiVSNTcGNIQ4AB3RPqHigkoLvlRiANh84ZkCPDjumUMqxaJuFyh-aXZOD4iKa1i_gtusUy2tzPwUcPKu2BLtzrGM02cA0fuszOWMyrBk2op9gwMYJZdPoYxTefs6PSd_lzOSU7a7_Q8kHZTYBFXeSoRjJQmBg1rL-NcQNLOtkzAGSbA2d22MXyvptTbS1HzJVtLp2O8P_rshhcaslTYilQQS2PGqv8_evAhz932B1NRjyVt2Y8bhAnQBqZ5RZOxnMiG--h185mJdE54ulimmootIqGBhBkDq5lkvJegBYVysqfI4RLlJM3m7Nm8v282crO7X8d-mMly9ps8XeSgGVHkNiLy64XsAedkqjYe4kwbfOBEv_6wttDNkXlDLL5aor8MLNd75tl25kBxKYOEqz93jUSHuBLyAdNAnsSxrvkkuyO_SNNzrZuopbbH81Il9LCD6_VtBwFRpGSaqHAjOkPKqEg-J6OfDt13aWZZDgJv8y44Td9Z0wsrCE0Ubnm_MnK34mstL1zbim0IaGzMGzL8TTOVhLb59-JaH5trYBLprzIT06ZsmBVGShBrSf4iP4G82qShNAvdHAFyn7c8',
         'p=uFbVGOYyXwIo%3DPsKtOYIB3RdZ_0fs2oV9WKSG0V7xJS41GJcwGrNC6UKQEyoXTSdZ0RicKsGzm4VA8stJdD3GWJ04rf5Pezg4jZbng7nyWWyEElm5F8AH9nDdq2rBOhk7knQUQOAem208os-L7qCKgIuMPasqR1WJ0TkD9OH23HATq67gNmVv640Pj3CR5-03LwJsU_AxQ-kNLF2WXj6kA-cLu66uziga-oBjc3qPa5eUH0PK1ZB-8NW-UtAhN6bw4_Kn9V1ftN3Jpsi9-XzCUtKU3SdDUAXgGKkR0Gw3tW2l3LIkqrGBbc-XAF2HNg_Kc3rQF1xXnqzyNplf5lukUz81JH2Pp7lMXnDsZ02bd3BI3MxBUlIDOfF6_6EAQqVLLf-BCICP7zieWOJ-17ELW0FNyplysf-wRowVD5Ly_CsE0OXR3uknPvG1dXo9qjeHOctrnIcNiNRjWk-ywUmeOl6Z-PpL3BTXjMLYjpzsoqEcZQdhoIHQI3KsqTe6KBqTSqp6V0SQGvkaYO3zY5E35arhO6VNpn2Ye4wDFXevR3R2jxWw5GU3S_JixvxHsd1xNJZwIU8nQ3NlQoP5N9MxDG4X4EYTDulZvnQS6WrWM9rZFe2y3yK5x0G6hMocfATf6cUgsBW2b0VaKkONJYO2zyHPE4UjeO3htOzHspM9MYtflKAD1ZxtywMsajrdqM7hkqvHaLtMG7nG6jBeS5H6TQZUvN75qPf5qWQu5GmvyqMLqQ7pmu6KudXCefOXUvzEArlRre69g3Dpfg1I2MIjouV7cxd1uhO2ByVq47NdSJJbwKuHcD7HY5shmLA4D_-QumgUxpc2Rxps5SJTwtiZZ46cUziwcffd9WnIl8U5dnTbm-RcHuKH-1PIVDCw9AdRxQpPUjtiaTAhzYVbVOQRz0SuOixo4jcJpt-kyJQ6hN3h7gUkGwwYGsDsxXPcN2R2He-F6Y2_390oK08TNiaCcK1vCM-ufjIajuoQz2njGi8csbsxwQAqIwfCCtn4VCFX_cVNUiR5Ch0Wfltg0eRsBJjk9xLiXh-vQbciqGxNujjthAQm-XyBmV6t8Ppdye-nWIuaPGZ8WOOowgLdHvizXJVJSwohn0Pup31ga5dfiCqgj6hsZ5MdZznzsv6afvTIQWcN8xsXAOIW3n-CUVFpaQ3RjzpmGe4dtO8e6g7rriYHmT-L10iq42z01gWhUFsi5Si6X4wEupp7AsgR1EoSRmzC8Ip-g72js9-4TzQxU7IziXDqTOxOTvzfN4b30VC_vXHaIN2z1EQ0UfOuX6N28mX6MWp60qlftm8ebCqUtBSlpKfqtcCGc-Zz8KAq90wVpDB4knqaMEg03ETK7da7wiAZXBF6VKpA4XNYf5Ost4FXx3oJaGWVzgrfFSHUpWuLvhPK_9pO8QboEbj11evNELhU8lli926HGpn_FS8df9b1atVLCJg_wwU10NyzOaJ4LXFrWD8ZfVa8zUZ2GOv-lIlXGtsUjgV4XRmtyX9wG4eAF',
         'p=dCWwRj3eGxCw%3DOY4T2_YuUncLhl9Xw_2Ub-T7Jttdbu18Gh0dMnnsHSXO1ig7sr8tSJkNX1nTNX2GuX70TOWoo_EWvzDSeDYYLSQCQOSH7iNFeymcBbdc010gz8Wy1SkdZxpN8R466gw1Kpcp_Eq6UPFejrP5K_PcCbrTjbIKiXmcPxHB8RVYJ4xAYrTKPH-VyX6YV8apG8yvFQQjmuo4tu5I90qBvvsAcFqEOieIeMcYYVoo4RP4JjYdf9oU1Wvse8ipslAKQfDrFW2jC2R0xMyw-GElD9HJ4eV7EUzzjCxbW1hjJ8sT1ErykzblQxghi4QIvyOJX7FPEhULMb-bVNeObQQt91H6dnG7u-K1lMtVgeE5WOgv0NhgkR_jYJ-BdCWlcxAkhD-sR2RoA-uXZT35iYSOlwul2XgcY8aNfWRlSgobtEZRhofJ1BD4VPqLqs0hxrNdBmYc3lvegZmIkE39YEsBA0LJiBrmg101zu2vybTMRdC11MMmEzvOO2Q97XUQIE8u-YE42WjUyDMNXmfOqFAyAjvv5LvT0WYBrrO9oCwfzeWY5MTx1DiyDi0LgR23sF9zTXte4_q5HB8Se2oXkSjFEZ03HgNhWALupYKrUjgK2u-RgGxQzX4No--Z1MYnvY9R2-XzbtA-4EDMwhER7ordjAYWA8DnQDaavFO8fPNaowhdew7ykErFSGccujSe-9B5GiJ8r9GcSsGFXj3r0GHHC9njGyodnOnXOBSD-Lnb1f4fPAOiMpghUxzDjgQZp1qW9eC0GG4iIK7oNsrXzwXQZksSaTg5kcNptXp98nD_nhRLM_HK4GDcXjwqcPWPMYBSOChXjlv3ltpk8BO1rO2ZXNOmV5acBmMTKLXGfTKv0pWcuAAS_W9gJp2DhDEP-qkAtQcx1MNS8TXSrYHYmcbADl2jnV9oi6IkMPmDfwTCpamlzWu-46YFKDn_rj8ocBWKE332v5ekr0TZbem2j8SqhTUNSiJLu1_seyU7Cj4ov_FsgHrjWa49QhBWl9ccMcXi0iSXpfuyxqYQYz6Ba8gbsTcMCZ2HjtzivUIYbO8r4qDOxMnhedvForxte1f33jr4gCSXqHfc8ZfHYQTVDZwG6bP1eK4e_WOfCJhbcqqFnJ78-NLayarp6pzdaOS6h6SJEuMf_NDihGNtg5_4q5V_hhs_y2dZ8qFR680ffIXmsBzzBIv3plCv9R6PlpvS-as8G6qG3F-mdxbpVF0OiNSFPh_5_wihf1pcu8qO5gfQ32RNYVtZGwGhg4w-4x-E46LrtOQHPG3wTe8TsOK8a97R9BiGrpKE0ZXTRQvIMi5dh6oft41f0IolVmWY_j16yp9B-qOZn2n7G2lsnZEyo-ALsbnIM8qX-BNTXCCsluWyp0UD7aiCR-tmpE9-mGH7D2GFYCJB7_Ad_hVYyMGThQZFJQj6rLGJi3ytnzC6yT3snpdEVe0qWuFw3x6EQDx9BXPHDMM6z91yON4sESZMF2VAHcxVXhpG49qgASap',
         'p=8YFg4QJ5A6eY%3DVpUK7bR_CQ5udfDRjejusr0-4xE_A91qQLcg5kgQUwKva8BEC6U2jKFQETY2q6KbvBX3K_1slga4IVCOUtfQG-qxqdT553mFlV2AQcpo7q1JiwK5Ybp7MGzXTUIMqmvYUDkYogjZlJhwu6TY7uWkfr-wsuzOg0Grt9hETpwc8dPnImtppPadfTLrvWmvnVNeYMjyFZ9fXqDWqC-XJQxIzamKw49XFpm0hJlu81P-k2OGaKlza5C4SY3sVitZ4hMAQuc_rWGkltgc5Q3sw0tI-fy5cO_Hh2-WDQKVVxZhhTfLPT0WZ9t9gsqOAH-O7EQk4EHeKYz4zVp0N5sXl40blIVcg1KBa0cn0E8VyyH8dtzM1PYOEZfmcg9EL-HyCxLposCp4m3-DzLQwExPh-2vw_AkR9xk32y8cMymOHVp0exD-7qkC2VqIu5TuQVZ30dAuE8lVLQgxtcUgWh96PPPCh7Xut5RTafV8drw42CrjskwOomyrS7AWIpnAfgA5LgxgoUxV2_BaTOUxx6DDB_AqPioTF_qp7wYQfw0DB9Qz7rWpRl8d4P_yHf74T1TPkCTxVnJII4ozypheTv8hsHPyWQPvTQ0ZbVV9w_OYpDbAj0cR-MtxI1GUlrI-f4ERjQcl_5FkeTPpXAOuHzJq4hpqt3bHo6af9mhgb1fNzzYey08drQ6TEiANmUd_g77An6fhM-tId5y4sOsz-iWRZLF7lbRx7QRX6lD4rJ6hE6cYU9kz48TOHjnE7RIFKZZYHXvHLSiXRb6fl_2FYq-1LTDjZxhD7jymdYIgW8eNrz8l6T23FgDnRE5Rh-TSvxt0nj-xbhHTlZJP-NAi1c7ZNVgXjDumpMNOswqVEso2o_SD7uAIbwAuWQVipuWJVKuPq1Q51px2mALiKLRRgwMomes_8VjKWig6kGlWsBRGbccWhlY5t5Zo4Brvo-NHLFusHIouU4KCynjtc_zlFWW9B6JH-7Z4fNT7NQ5hanjOYHNaQLotWSSBCHFXsfiZ4zzxlNTWRF2aJX5nXkIkUKA2-m27LdVoIkQeU1RbwqYw7dXQNOQmmiMVkk3WjShUh6kwc38QRk9TC1AAZjGXRMpNyHa9MeebE0ImVsCrQA9PAkJdQUCVNf0AsEOBKoNJXUVe9moCTz12FAjFSOIlPolCBJ_u-a1U-vYObJNmoilGcTuxrdvNeTTGTsCoLyDU2qprHamzml3B04Sijm1Gru3l_D8DoSefJ2GxaiioO4Mz5LKMnDGCxtA4KmRIitPN3iS7l3KieTmSFxnpGu8iv8tYP-2LR6WHwiXrtdPrxV8HBcv1J0QIZjd8pPP0zW3ps7ZwXorVLKxFlCThwPYJTPaIcfBV4tKeoTq5jLPi1FDD7gCjcd8I60z7iIzeYTOXlBvsraSHUoUY2vqQvlwO0tqVC-jriE_yYVsbvvbjnltoZnse_eFFpANGIhqC4nAE0WS63UepREfIVBdY0XdV9qx5pkXNPEHQ9e8jrLc',
         'p=O2JgR8oZr6IU%3D3jJeRBx8_TrkLPg-a6br6aUclrcW-BoZ6DLFRXQY-S5hLTHovK80XozmrNbGSH0-C9ylE1ARL-op2i8B0ZzuUCvL5PQo8zFmiR3_R74DsZIftp-9oHH59ni8gq4t9_ctDvoiNaT4UJ31i04lILwTPgSQzjWBtJRkAv3dczT4Czx_pMxU0RRfj2zM4DrZ2mvpqVm5F0ERLZ-ugEtbhGZKjTCFP-G7NRLXOL3vhL9WYGhbB0jCIzAruPfn-rzjMIwhLxOAJ2aTSQWCwKFborpWpL8zlFlWSXVaLt5_-Pd88YobkU-43FaoAlfKnXrFMlCbjTVeC7gHNxgeDK4u7CchylVyVt5XyeRU3LgjeR6sB2Pv1ikWJ5enyow4eBZNX3BbFPCIc_jFYu9Jpr1HKdQ6do0IsEAnUNFKeGHmiLNZUIqfNIl_B3mDtENP8f-O6BYNIOyNMB3QvrqyXZkF-Ici5kiJyglYQrLp8bZLYz1n-Ik4ltQtcCnkjHI6rVS448HvdLVj6-KGlKLXMewVwMQlM7KEnuT9yAJSVUOu_aTWliNbiHP-bifiGm6yG0JI7z8ChQyoUT4NUmxErTtIc42JF2B_T6PS8DE41hYlSndojXWv6E_37j0jT1eCTpADkTKOdtzVSAhgk1KMt67DDV8L3IXiTDUaR7nrE5Aiuh0HH1vBvb02cUZejlhXgXA5ZLDgCYazuCQITri2bqG0E00htj6z-eWmxZSGm6eGZ3q2jNZDJ5BMekFd_4xKr25lSlFxEcxyERiTEFm7VuqDsfm3EDBekdnIW1fnfDzV_KSmLGTYl4gzghB0COBjTmTZ70kZmp9_zF-IWFgby99yTwpaspS-cigNwqCCXBf48t3reAsUvSZFTyxH44kLt84uWeJCdUCnSXIB0a0_BYddm1kq-fpPMUpYwRbnr7yuLWf4xLKrqnVJQvJTJX2uoJVSiCjYrVwrbUyv56ZiZactwqDwpPj20QRGTgkbOWPg9XM7-tXYRxCsPhdDtz7OomOdJTgEhyuZq5Gf0M05RhmyyA91IXL82_oVsjsfcEJbjixe-ej0Zm0lfqa7zrfHenA7xPkMhwmqq1ThfaEe8AfOH90EYWaFKFH_GMU47-n8JAP0KDiawJIZhBNW2KiH4jETRKGr-T4UaSyg5LTnw_I7pcjE8Ymjnte8v3LKnvSq-fnqpgrLami723Kn2EVMdUKe8ItKJHAnkZW1mM1XNsWAxN29B40XWMvH0fQ86qIStFHtEvEHl9lkGiH4jC-KLTfseJzTuJiVdD-y7eiRfQN9Tjoss02b_V3RUZOVTRg79MOHJhxRgtIHZFTqukfKqjOOZdrI3yBMEBI7d4NRRe5uBFd3E8HKyS8yorCPdCbALLA6u1RE2HrCQEUgJBvWJgKJyWwdx6aH4AK-fA1uQQk6GIgKGeugJdHvg4q-Rjo3oEjJS1yVCzyYU3idmkFfDFSioJOIdZ9pVQORhnq7D7rhLaPYh4ko6OOedJ_u',
         'p=QcTMBiVxDAfc%3DeYMRZIJw4FE_K8Otb-sIosz0uw4BohZADRWxPYwVqXa5zL1TLMu-iiHcxOzGi3vYo1tLIQuCphsFlHlZZohsWVgXYjpxC8kifPVmGHi5Mz2eMdKT9n34zT4EpgkP_mm65JnRZqz_PZhSKAYBaZ21wbAyI5LgjedE2jqA9MLfyDRPaoCeRWG30m1_HfoUmuI8E1aZ0Hiupj63PbZcR1qc3EFHu1Xc4Zc_1b9uF4BhM-O-SQ3ceLMg_gB6S1hF2F-iPxovuubE_kH3OFgatjIdQLBHU6uZEIbKky68tbYz2ReDCunBJH3g29bKkwCSnpRagPexFFyotBlP2RHEVcr3yG0U1aB-8QS8EHMO_G6gPAa6rP59Cz_LimBB0viUk0Am-HmLAlrBziJDQyfEwRYEynM5o4ymsDi40WlpFFVlbcF0mLMzJUYj1K2n5YpTSWwkZ8YjWUnAYEVoe9FzX197pIQkNoN-cNU_cFya3NNTkgb2GgAhSmke5ha2TzIa1-rDauiFOyoVkYNQsyYw6qQ3bRfowxvV3BP0GpLNwu_oSf-raHFoQTwsZ3bHPM0UUQtzN3VFuvp2kKuKYJ7KuWOB_6Wxg_CvnQBp13hRZdOB9_F9Sd4b-l4Gyj9HdYCVZn898fd6QZH-Y54R8r05EjomczcNhZi6W-Zxs2T_trAJz4dL6QMDgDvlfwU7BBNBmk5xemVemg62xdZ6Wgg4z5n5V9IXFIala5RwNv8QP8Sf4HavWMPqDfuYazPavWXruwZRccMsD28KIqjOb-JNGLAGE4z3LslsxuEB18npAQL0VGpGA-6bPZJJ2cuJCtThOQNsLcDu2EBVg1dv1WeJq8K0trsRxnNl9RFUijwL7xK4FJAEvwgMgFrt-v9i6OjRvJYb1jrqayr0prIJMiw2JD-v33xUetkZVZDJW0OHm7FSI6OT9g4Yl2mVGIb-PxduBwky0LtvvSiF_nna1nM26E5BXkQwPkVzJl3l9Sax-V1H7gA_4d3ZI2AerWnyDuJOlDfpPrKux4oGDD6lNuPd9I0YuTwXODojwOjgaeJM4l1ZzCOTnq6014zVwUAwR4D34swc-5D3HxpvnFDoIDcBDP3UUFFbFGc4G6N8AT-6LcdKkn8GfxyB5lPNFO3Lm_s0DutGiyJor8wtTGK8r4eNiLpcMQgfdT74kxRgiIXvxF7xFaC00rr7wqVWkA5fg82aR_IQ9Lq0k3-gmXD_UzkT3vLkcoZVD_G3o3K8O7_OTHrow1hJrysibODFstira8Mtflg0vmZ1Tt-fJ73VN2jn9f80nKg2HbVSdK5rCL2tlmpRT6jQsF2mEI5zae4qXbPcc00wG0D9NNaRm-WyrmzQp1sSdb9gds9ClVWnIFQ6teRZczGVPpV3x8RMg86BTZyYz6Xfu0YTJelWGBEu3jt9SmXOfYEbNxqBM0lhLA2BNipwcF9WHfsBZ8KhQxe4IIU4TJ9q_roHPgmRBcgBRS_gmRz8JViCGI-nWLbw4'
             
        ]
    timeZone =  new Date().getTimezoneOffset() / 60;
    timestamp = Date.now()+ (8+timeZone) * 60 * 60 * 1000;
    bjTime = new Date(timestamp).toLocaleString('zh',{hour12:false,timeZoneName: 'long'});
    console.log(`\n === 脚本执行 ${bjTime} ===\n`);
!(async () => {
  $.log(`您共提供${startArr.length}次浏览赚任务`)
  for (let i = 0; i < startArr.length; i++) {
    if (startArr[i]) {
      gainbody = startArr[i];
      $.index = i + 1;
      $.log(`-------------------------\n\n开始中青看点浏览赚第${$.index}次任务`)
    }
      await GainStart();
 }
   console.log(`-------------------------\n\n中青看点共完成${$.index}次任务，共计获得${gainscore}个青豆，浏览赚任务全部结束`);
   //$.msg("中青看点浏览赚", `共完成${$.index}次任务`+`  共计获得${gainscore}个青豆`);
   
   $.log(`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n您共提供${lookArr.length}次看看赚任务\n`)
  for (let k = 0; k < lookArr.length; k++) {
    if (lookArr[k]) {
      lookbody = lookArr[k];
      $.index = k + 1;
      $.log(`-------------------------\n\n开始中青看点看看赚第${$.index}次任务`)
    }
      await lookStart();
 }
   console.log(`-------------------------\n\n中青看点共完成${$.index}次任务，共计获得${lookscore}个青豆，看看赚任务全部结束`);
   $.msg("中青看点看看赚", '共完成'+(lookArr.length+startArr.length)+'次任务，共计获得'+parseInt(lookscore+gainscore)+'个青豆');
   
   if ($.isNode()){
     //await notify.sendNotify($.name，`共完成${$.index}次任务，\n共计获得${gainscore}个青豆`
}
})()
  .catch((e) => $.logErr(e))
  .finally(() => $.done())

function GainStart() {
  return new Promise((resolve, reject) =>{
    $.post(gainHost('task/browse_start.json',gainbody), async(error, resp, data) =>{
      let startres = JSON.parse(data);
      if (startres.success == false) {
        smbody = $.getdata('youth_start').replace(gainbody+"&","");
        $.setdata(smbody,'youth_start');
        $.log(startres.message+"已自动删除")
      } else {
         comstate = startres.items.comtele_state;
      if (comstate == 0) {
        $.log("任务开始，" + startres.items.banner_id + startres.message);
        await $.wait(10000);
        await GainEnd()
      } else if (comstate == 1) {
        $.log("任务:" + startres.items.banner_id + "已完成，本次跳过");
       }
      }
      resolve()
    })
  })
}

function lookStart() {
  return new Promise((resolve, reject) =>{
    $.post(gainHost('Nameless/adlickstart.json',lookbody), async(error, resp, data) =>{
       startlk = JSON.parse(data);
      if (startlk.success == false) {
        smbody = $.getdata('youth_start').replace(lookbody+"&","");
        $.setdata(smbody,'youth_start');
        $.log(startlk.message+"已自动删除")
      } else {
         comstate = startlk.items.comtele_state;
      if (comstate == 0) {
        $.log("任务开始，" + startlk.items.banner_id + startlk.message);
       for ( let j = 0;j< startlk.items.see_num -startlk.items.read_num;j++ ){
       $.log("任务执行第"+ parseInt(j+1)+"次")
        await $.wait(8000);
        await lookstatus()
       }
        await $.wait(10000);
        await lookEnd()
      } else if (comstate == 1) {
        $.log("任务:" + startlk.items.banner_id + "已完成，本次跳过");
       }
      }
      resolve()
    })
  })
}
  
function GainEnd() {
  return new Promise((resolve, reject) =>{
    $.post(gainHost('task/browse_end.json',gainbody), (error, resp, data) =>{
      let endres = JSON.parse(data);
      if (endres.success == true) {
        $.log("任务" + endres.items.banner_id + endres.message + "，恭喜获得" + endres.items.score + "个青豆");
        gainscore += parseInt(endres.items.score)
      } else {
        $.log(endres.message)
      }
      resolve()
    })
  })
}

function lookstatus() {
  return new Promise((resolve, reject) =>{
    $.post(gainHost('Nameless/bannerstatus.json',lookbody), (error, resp, data) =>{
      let endres = JSON.parse(data);
      if (endres.success == true) {
        $.log("任务" + endres.items.banner_id +endres.message);
      } else {
        $.log(endres.message)
      }
      resolve()
    })
  })
}
function lookEnd() {
  return new Promise((resolve, reject) =>{
    $.post(gainHost('Nameless/adlickend.json',lookbody), (error, resp, data) =>{
      let endres = JSON.parse(data);
      if (endres.success == true) {
        $.log("任务" + endres.items.banner_id +endres.message+ "，" +endres.items.desc)
        lookscore += parseInt(endres.items.score)
      } else {
        $.log(endres.message)
      }
      resolve()
    })
  })
}
function gainHost(api,body) {
  return {
    url: 'https://kandian.youth.cn/v5/'+api,
  headers: {
             'access':'WIFI',
            'os-api': '26',
            'device-platform': 'android',
            'openudid': '83bcb1d7cab0195e',
            'app-version': '2.4.3',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': '1549',
            'Host': 'kandian.youth.cn',
            'Connection': 'Keep-Alive',
            'Accept-Encoding': 'gzip',
            'User-Agent': 'okhttp/3.12.2'
            },
   body: body
  }
}


function GetCookie() {
  if ($request && $request.method != 'OPTIONS' && $request.url.match(/\/browse_start\.json/)) {
     startbodyVal = $request.body;
    if (startbodys) {
      if (startbodys.indexOf(startbodyVal) > -1) {
        $.msg($.name, '阅读请求重复，本次跳过');
        return
      } else if (startbodys.indexOf(startbodyVal) == -1) {
        startbodys += "&" + startbodyVal
      }
    } else {
      startbodys = $request.body
    }
    $.setdata(startbodys, 'youth_start');
    $.log("获取浏览赚请求: " + startbodyVal);
    $.msg($.name, '获取浏览赚请求成功')
  } else if ($request && $request.method != 'OPTIONS' && $request.url.match(/\/adlickstart\.json/)) {
     seeVal = $request.body;
    if (lookbodys) {
      if (lookbodys.indexOf(seeVal) > -1) {
        $.msg($.name, '阅读请求重复，本次跳过');
        return
      } else if (lookbodys.indexOf(seeVal) == -1) {
        lookbodys += "&" + seeVal
        $.msg($.name, '获取看看赚请求'+ lookbodys.split("&").length+'成功')
      }
    } else {
      lookbodys = $request.body
      $.msg($.name, '获取看看赚请求成功')
    }
    $.setdata(lookbodys, 'youth_look');
    $.log("获取浏览赚请求: " + seeVal)
  } 
}

function Env(t,e){class s{constructor(t){this.env=t}send(t,e="GET"){t="string"==typeof t?{url:t}:t;let s=this.get;return"POST"===e&&(s=this.post),new Promise((e,i)=>{s.call(this,t,(t,s,r)=>{t?i(t):e(s)})})}get(t){return this.send.call(this.env,t)}post(t){return this.send.call(this.env,t,"POST")}}return new class{constructor(t,e){this.name=t,this.http=new s(this),this.data=null,this.dataFile="box.dat",this.logs=[],this.isMute=!1,this.isNeedRewrite=!1,this.logSeparator="\n",this.startTime=(new Date).getTime(),Object.assign(this,e),this.log("",`\ud83d\udd14${this.name}, \u5f00\u59cb!`)}isNode(){return"undefined"!=typeof module&&!!module.exports}isQuanX(){return"undefined"!=typeof $task}isSurge(){return"undefined"!=typeof $httpClient&&"undefined"==typeof $loon}isLoon(){return"undefined"!=typeof $loon}toObj(t,e=null){try{return JSON.parse(t)}catch{return e}}toStr(t,e=null){try{return JSON.stringify(t)}catch{return e}}getjson(t,e){let s=e;const i=this.getdata(t);if(i)try{s=JSON.parse(this.getdata(t))}catch{}return s}setjson(t,e){try{return this.setdata(JSON.stringify(t),e)}catch{return!1}}getScript(t){return new Promise(e=>{this.get({url:t},(t,s,i)=>e(i))})}runScript(t,e){return new Promise(s=>{let i=this.getdata("@chavy_boxjs_userCfgs.httpapi");i=i?i.replace(/\n/g,"").trim():i;let r=this.getdata("@chavy_boxjs_userCfgs.httpapi_timeout");r=r?1*r:20,r=e&&e.timeout?e.timeout:r;const[o,h]=i.split("@"),a={url:`http://${h}/v1/scripting/evaluate`,body:{script_text:t,mock_type:"cron",timeout:r},headers:{"X-Key":o,Accept:"*/*"}};this.post(a,(t,e,i)=>s(i))}).catch(t=>this.logErr(t))}loaddata(){if(!this.isNode())return{};{this.fs=this.fs?this.fs:require("fs"),this.path=this.path?this.path:require("path");const t=this.path.resolve(this.dataFile),e=this.path.resolve(process.cwd(),this.dataFile),s=this.fs.existsSync(t),i=!s&&this.fs.existsSync(e);if(!s&&!i)return{};{const i=s?t:e;try{return JSON.parse(this.fs.readFileSync(i))}catch(t){return{}}}}}writedata(){if(this.isNode()){this.fs=this.fs?this.fs:require("fs"),this.path=this.path?this.path:require("path");const t=this.path.resolve(this.dataFile),e=this.path.resolve(process.cwd(),this.dataFile),s=this.fs.existsSync(t),i=!s&&this.fs.existsSync(e),r=JSON.stringify(this.data);s?this.fs.writeFileSync(t,r):i?this.fs.writeFileSync(e,r):this.fs.writeFileSync(t,r)}}lodash_get(t,e,s){const i=e.replace(/\[(\d+)\]/g,".$1").split(".");let r=t;for(const t of i)if(r=Object(r)[t],void 0===r)return s;return r}lodash_set(t,e,s){return Object(t)!==t?t:(Array.isArray(e)||(e=e.toString().match(/[^.[\]]+/g)||[]),e.slice(0,-1).reduce((t,s,i)=>Object(t[s])===t[s]?t[s]:t[s]=Math.abs(e[i+1])>>0==+e[i+1]?[]:{},t)[e[e.length-1]]=s,t)}getdata(t){let e=this.getval(t);if(/^@/.test(t)){const[,s,i]=/^@(.*?)\.(.*?)$/.exec(t),r=s?this.getval(s):"";if(r)try{const t=JSON.parse(r);e=t?this.lodash_get(t,i,""):e}catch(t){e=""}}return e}setdata(t,e){let s=!1;if(/^@/.test(e)){const[,i,r]=/^@(.*?)\.(.*?)$/.exec(e),o=this.getval(i),h=i?"null"===o?null:o||"{}":"{}";try{const e=JSON.parse(h);this.lodash_set(e,r,t),s=this.setval(JSON.stringify(e),i)}catch(e){const o={};this.lodash_set(o,r,t),s=this.setval(JSON.stringify(o),i)}}else s=this.setval(t,e);return s}getval(t){return this.isSurge()||this.isLoon()?$persistentStore.read(t):this.isQuanX()?$prefs.valueForKey(t):this.isNode()?(this.data=this.loaddata(),this.data[t]):this.data&&this.data[t]||null}setval(t,e){return this.isSurge()||this.isLoon()?$persistentStore.write(t,e):this.isQuanX()?$prefs.setValueForKey(t,e):this.isNode()?(this.data=this.loaddata(),this.data[e]=t,this.writedata(),!0):this.data&&this.data[e]||null}initGotEnv(t){this.got=this.got?this.got:require("got"),this.cktough=this.cktough?this.cktough:require("tough-cookie"),this.ckjar=this.ckjar?this.ckjar:new this.cktough.CookieJar,t&&(t.headers=t.headers?t.headers:{},void 0===t.headers.Cookie&&void 0===t.cookieJar&&(t.cookieJar=this.ckjar))}get(t,e=(()=>{})){t.headers&&(delete t.headers["Content-Type"],delete t.headers["Content-Length"]),this.isSurge()||this.isLoon()?(this.isSurge()&&this.isNeedRewrite&&(t.headers=t.headers||{},Object.assign(t.headers,{"X-Surge-Skip-Scripting":!1})),$httpClient.get(t,(t,s,i)=>{!t&&s&&(s.body=i,s.statusCode=s.status),e(t,s,i)})):this.isQuanX()?(this.isNeedRewrite&&(t.opts=t.opts||{},Object.assign(t.opts,{hints:!1})),$task.fetch(t).then(t=>{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=>e(t))):this.isNode()&&(this.initGotEnv(t),this.got(t).on("redirect",(t,e)=>{try{if(t.headers["set-cookie"]){const s=t.headers["set-cookie"].map(this.cktough.Cookie.parse).toString();this.ckjar.setCookieSync(s,null),e.cookieJar=this.ckjar}}catch(t){this.logErr(t)}}).then(t=>{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=>{const{message:s,response:i}=t;e(s,i,i&&i.body)}))}post(t,e=(()=>{})){if(t.body&&t.headers&&!t.headers["Content-Type"]&&(t.headers["Content-Type"]="application/x-www-form-urlencoded"),t.headers&&delete t.headers["Content-Length"],this.isSurge()||this.isLoon())this.isSurge()&&this.isNeedRewrite&&(t.headers=t.headers||{},Object.assign(t.headers,{"X-Surge-Skip-Scripting":!1})),$httpClient.post(t,(t,s,i)=>{!t&&s&&(s.body=i,s.statusCode=s.status),e(t,s,i)});else if(this.isQuanX())t.method="POST",this.isNeedRewrite&&(t.opts=t.opts||{},Object.assign(t.opts,{hints:!1})),$task.fetch(t).then(t=>{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=>e(t));else if(this.isNode()){this.initGotEnv(t);const{url:s,...i}=t;this.got.post(s,i).then(t=>{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=>{const{message:s,response:i}=t;e(s,i,i&&i.body)})}}time(t){let e={"M+":(new Date).getMonth()+1,"d+":(new Date).getDate(),"H+":(new Date).getHours(),"m+":(new Date).getMinutes(),"s+":(new Date).getSeconds(),"q+":Math.floor(((new Date).getMonth()+3)/3),S:(new Date).getMilliseconds()};/(y+)/.test(t)&&(t=t.replace(RegExp.$1,((new Date).getFullYear()+"").substr(4-RegExp.$1.length)));for(let s in e)new RegExp("("+s+")").test(t)&&(t=t.replace(RegExp.$1,1==RegExp.$1.length?e[s]:("00"+e[s]).substr((""+e[s]).length)));return t}msg(e=t,s="",i="",r){const o=t=>{if(!t)return t;if("string"==typeof t)return this.isLoon()?t:this.isQuanX()?{"open-url":t}:this.isSurge()?{url:t}:void 0;if("object"==typeof t){if(this.isLoon()){let e=t.openUrl||t.url||t["open-url"],s=t.mediaUrl||t["media-url"];return{openUrl:e,mediaUrl:s}}if(this.isQuanX()){let e=t["open-url"]||t.url||t.openUrl,s=t["media-url"]||t.mediaUrl;return{"open-url":e,"media-url":s}}if(this.isSurge()){let e=t.url||t.openUrl||t["open-url"];return{url:e}}}};this.isMute||(this.isSurge()||this.isLoon()?$notification.post(e,s,i,o(r)):this.isQuanX()&&$notify(e,s,i,o(r)));let h=["","==============\ud83d\udce3\u7cfb\u7edf\u901a\u77e5\ud83d\udce3=============="];h.push(e),s&&h.push(s),i&&h.push(i),console.log(h.join("\n")),this.logs=this.logs.concat(h)}log(...t){t.length>0&&(this.logs=[...this.logs,...t]),console.log(t.join(this.logSeparator))}logErr(t,e){const s=!this.isSurge()&&!this.isQuanX()&&!this.isLoon();s?this.log("",`\u2757\ufe0f${this.name}, \u9519\u8bef!`,t.stack):this.log("",`\u2757\ufe0f${this.name}, \u9519\u8bef!`,t)}wait(t){return new Promise(e=>setTimeout(e,t))}done(t={}){const e=(new Date).getTime(),s=(e-this.startTime)/1e3;this.log("",`\ud83d\udd14${this.name}, \u7ed3\u675f! \ud83d\udd5b ${s} \u79d2`),this.log(),(this.isSurge()||this.isQuanX()||this.isLoon())&&$done(t)}}(t,e)}
